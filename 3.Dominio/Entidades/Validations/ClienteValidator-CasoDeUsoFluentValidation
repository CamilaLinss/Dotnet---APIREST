//using Dominio.Entidades;
//using FluentValidation;

//namespace _3.Dominio.Entidades.Validations
//{
        //Criando as regras da entidaed Cliente
        //public class ClienteValidator : AbstractValidator<Cliente>  //(https://docs.fluentvalidation.net/en/latest/start.html)
        //{

                  // public ClienteValidator()
        //{
  
                  //RuleFor(x => x.nome)
                  //.NotNull().WithMessage("O Nome é necessário")
                  //.NotEmpty().WithMessage("O campo Nome não pode ficar vazio")
                  //.MaximumLength(10).WithMessage("O campo Nome so aceita até 10 caracteres");

                  //RuleFor(x => x.email)
                  //.NotNull().WithMessage("O email é necessário")
                  //.NotEmpty().WithMessage("O campo email não pode ficar vazio")
                  //.EmailAddress().WithMessage("Formato de e-mail Inválido");

                  //RuleFor(x => x.password)
                  //.Must(pass => pass.).... Tratativa muito boa para password

                  //RuleForEach (para listas)
            
        //}


        //PARA USAR DESSA FORMA PRECISARIA INSTANCIAR ESSA MESMA CLASSE PARA O TRATAMENTO DO RESULTADO
        //EX: //JA COM ENTITY<T> NÃO PRECISARIA FICAR INSTANCIANDO

                 //FLUENTVALIDATION TRATAMENTO
                 //!! ClienteValidator validador = new ClienteValidator();
                 //ValidationResult result = validador.Validate(cliente);

                 //if(!result.IsValid){

                 //List<Validationfailure> falhas = new List<Validationfailure>();

                 //foreach(var failure in result.Errors){

                 //var falha = new Validationfailure(failure.PropertyName, failure.ErrorMessage);

                 //falhas.Add(falha);

                 //}

                 //return BadRequest(falhas);

            //}

        
    //}
//}